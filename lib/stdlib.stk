// [a] dup --> [a] [a]
{
    $__a : $__a $__a
} $dup ::

// [a] drop -->
{
    $__ :
} $drop ::

// [a] [b] swap --> [b] [a]
{
    $__b : $__a : $__b $__a
} $swap ::

// [a] [b] [c] pull2 --> [b] [c] [a]
{
    $__c :
    $__b :
    $__a :
    $__b $__c $__a
} $pull2 ::

// [a] [b] [c] [d] pull3 --> [b] [c] [d] [a]
{
    $__d :
    $__c :
    $__b :
    $__a :
    $__b $__c $__d $__a
} $pull3 ::

// [a] singleton --> [ a ]
{
    [] swap append
} $singleton ::

// [a] [b] pair --> [ a, b ]
{
    []
    pull2 append
    swap append
} $pair ::

// [arr] all?
// Push `true` if all items in `arr` are also `true`
// else `false`
{
    dup length 
    swap { 0 1 ? } map sum
    =
} $all? ::

// [arr] any?
// Push `true` if any items in `arr` are also `true`
// else `false`
{
    { | } false fold
} $any? ::

// [arr] [pred] count
// Count number of items matching `pred` in `arr`
{
    map { 0 1 ? } map sum
} $count ::

// [zipped] unzip
// Unzip [[a1, b1], [a2, b2], ...] into [[a1, a2, ...], [b1, b2, ...]]
{
    {
        .. $thisRight : $thisLeft :
        .. $restRight : $restLeft :
        []
            $restLeft  $thisLeft  append append
            $restRight $thisRight append append
    }
    [] [] pair
    fold
} $unzip ::

// [a] [b] zip
// Zip [a1, a2, ...] and [b1, b2, ...] into [[a1, b1], [a2, b2], ...]
// Truncates the longer list to the same length as the shorter one
{
    $a :
    $b :

    // Find target length
    $a length $b length pair min $len :

    // Pick out of lists to build
    0 $len 1 - range
    {
        $idx :
        $a $idx @
        $b $idx @
        pair
    } map
} $zip ::

// [arr] empty?
// `true` if the list is empty, else `false`
{ [] = } $empty? ::

// [arr] [pred] filter
// Create a new array by filtering `arr` to only contain items which match `pred`
//
// The implementation for this is horrible, because due to bindings being stack-scoped, recursive
// functions can't use bindings!
{
    swap dup empty?
    // [pred] [arr] [is-empty]

    {
        // Standard case: items in the array
        // Filter the current one and recurse to the rest of the list
        
        swap dup pull2 shift dup
        // [pred] [pred] [rest] [this] [this]

        pull3 #
        // [pred] [rest] [this] [this-matches-pred?]

        { drop [] }
        { singleton }
        ? #
        // [pred] [rest] [this-or-empty-array]

        pull2 pull2 swap
        // [this-or-empty-array] [rest] [pred]

        filter
        // [this-or-empty-array] [rest-array]

        ++
    }
    {
        // Base case: empty array
        drop drop []
    }
    ? #
} $filter ::

// [arr] min
// Get the minimum item in the array
{
    shift
    $start :

    // [rest]
    {
        // [acc] [item]
        dup pull2 dup pull2 swap
        // [item] [acc] [item] [acc]

        <
        {
            // New item IS NOT lower than the accumulator, so continue using the accumulator
            swap drop
        }
        {
            // New item IS lower than the accumulator, so drop accumulator and use new item
            drop
        }
        ? #
    }
    $start
    fold
} $min ::

// [ a, b, c, ... ] enumerate --> [ [a, 0], [b, 1], [c, 2], ... ]
{
    $arr :

    $arr
    0 $arr length 1 - range
    zip
} $enumerate ::

// [arr] [index] remove
{
    $soughtIndex :
    enumerate
    { .. drop $soughtIndex = ! } filter
    { .. swap drop } map
} $remove ::

// [arr] sum
{
    { + } 0 fold
} $sum ::

// [item] [count] repeat
{
    dup 0 =
    {
        // Funky hack to work around binding precedence issue
        // Do all binding work in a discarded non-recursive frame
        {
            $count :
            $item :
            $item singleton $item $count 1 -
        } #
        repeat
        ++
    }
    { drop drop [] }
    ? #
} $repeat ::

// Ridiculous but very funny array sugar
// Means you can write array literals like [ 1 , 2 , 3 ]
{ [] } $[ ::
{ append } $, ::
{ append } $] ::
