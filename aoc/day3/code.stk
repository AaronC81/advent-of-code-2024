// Broad strokes - break on key characters
$input
{ $c :
    $c ')' =
    $c '(' = |
    $c ',' = |
}
break
$tokens :

// Check whether an array ends with a different array.
//
// HAYSTACK NEEDLE end? --> BOOL
//   HAYSTACK: Array to search in
//   NEEDLE: Expected ending
//   BOOL: Whether it ended with that
{
    $needle : $haystack :

    $haystack length $needle length >=

    $haystack reverse $needle reverse 
    zip { .. = } map all?
    
    &
} $end? ::

{ [ 'm' , 'u' , 'l' ] end? } $validMul? ::
{ [ 'd' , 'o' ] end? } $validDo? ::
{ [ 'd' , 'o' , 'n' , ''' , 't' ] end? } $validDont? ::

{
    dup length
        dup  3 <=
        swap 1 >= &
        swap { digit? } map all? 
    &
} $validNumber? ::

// Interpret sequence of operations.
//
// TOGGLING interpret --> RESULT
//   TOGGLING: controls whether to look for `do` and `don't`
{
    // For part 1/2 control
    $useToggling :

    // Look for that token sequence! 
    // Fold using an accumulator of [ count so far, enabled ]
    6 $windowSize :
    0 $tokens length $windowSize - range
    {
        $index :
        ..
        $enabled :
        $countPast :

        // mul(x,y)
        $tokens $index     @ validMul?      
        $tokens $index 1 + @ [ '(' ] =           &
        $tokens $index 2 + @ validNumber?    &
        $tokens $index 3 + @ [ ',' ] =           &
        $tokens $index 4 + @ validNumber?    &
        $tokens $index 5 + @ [ ')' ] =           &
        $enabled                                &
        {
            // No match. Contribute zero to the overall count
            0
        }
        {
            // A match, wahey! Do a mul
            $tokens $index 2 + @ int
            $tokens $index 4 + @ int
            *
        }
        ? #
        $countThis :

        // Check for toggling controls
        $useToggling
        { $enabled }
        {
            // do()
            $tokens $index     @ validDo?      
            $tokens $index 1 + @ [ '(' ] = &
            $tokens $index 3 + @ [ ')' ] = &
            {
                // don't()
                $tokens $index     @ validDont?
                $tokens $index 1 + @ [ '(' ] = &
                $tokens $index 3 + @ [ ')' ] = &
                $enabled false ?
            }
            { true }
            ? #
        }
        ? #
        $newEnabled :

        [ $countPast $countThis + , $newEnabled ]
    } [ 0 , true ] fold .. drop
} $interpret ::

false interpret println
true interpret println
